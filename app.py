import streamlit as st
from groq import Groq

# Kh·ªüi t·∫°o Groq API
client = Groq(api_key="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")

def ask_groq(query):
    messages = [
        {"role": "system", "content": "B·∫°n l√† gi√°o vi√™n d·∫°y ti·∫øng Anh cho ng∆∞·ªùi Vi·ªát. H√£y tr·∫£ l·ªùi d·ªÖ hi·ªÉu, gi·∫£i th√≠ch r√µ r√†ng, d√πng v√≠ d·ª• c·ª• th·ªÉ, d·ªãch nghƒ©a ti·∫øng Vi·ªát khi c·∫ßn thi·∫øt. N·∫øu c√≥ th·ªÉ, h√£y cung c·∫•p m·∫πo ghi nh·ªõ ho·∫∑c c√°ch s·ª≠ d·ª•ng th·ª±c t·∫ø trong giao ti·∫øp. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."},
        {"role": "user", "content": query}
    ]
    response = client.chat.completions.create(messages=messages, model="mixtral-8x7b-32768")
    return response.choices[0].message.content

# UI Streamlit
st.set_page_config(page_title="Chatbot H·ªçc Ti·∫øng Anh", layout="wide")
st.title("üó£Ô∏è Chatbot D·∫°y Ti·∫øng Anh")
st.write("H·ªèi v·ªÅ t·ª´ v·ª±ng, ng·ªØ ph√°p, c√°ch ph√°t √¢m ho·∫∑c giao ti·∫øp th·ª±c t·∫ø!")

# L·ªãch s·ª≠ tr√≤ chuy·ªán
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# G·ª£i √Ω c√¢u h·ªèi ƒë·ªông
if "suggestions" not in st.session_state:
    st.session_state.suggestions = [
        "L√†m th·∫ø n√†o ƒë·ªÉ h·ªçc t·ª´ v·ª±ng hi·ªáu qu·∫£?",
        "C√°ch ph√°t √¢m chu·∫©n t·ª´ 'schedule'?",
        "S·ª± kh√°c bi·ªát gi·ªØa 'say', 'tell', 'speak' v√† 'talk'?",
        "C·∫•u tr√∫c th√¨ hi·ªán t·∫°i ho√†n th√†nh?",
        "M·∫πo nh·ªõ c√°ch d√πng gi·ªõi t·ª´ trong ti·∫øng Anh?"
    ]

st.sidebar.subheader("üéØ G·ª£i √Ω c√¢u h·ªèi")
selected_query = None
for s in st.session_state.suggestions:
    if st.sidebar.button(s):
        selected_query = s

# Nh·∫≠p c√¢u h·ªèi
query = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:", value=selected_query if selected_query else "")
if query:
    with st.spinner("ƒêang t·∫°o c√¢u tr·∫£ l·ªùi..."):
        answer = ask_groq(query)
    st.session_state.chat_history.append({"question": query, "answer": answer})
    
    # C·∫≠p nh·∫≠t g·ª£i √Ω d·ª±a tr√™n ch·ªß ƒë·ªÅ c√¢u h·ªèi
    if "t·ª´ v·ª±ng" in query.lower():
        st.session_state.suggestions = [
            "L√†m sao ƒë·ªÉ nh·ªõ t·ª´ v·ª±ng l√¢u d√†i?",
            "C√≥ m·∫πo n√†o h·ªçc t·ª´ v·ª±ng nhanh kh√¥ng?",
            "Nh·ªØng t·ª´ v·ª±ng ph·ªï bi·∫øn trong giao ti·∫øp?",
            "T√¥i n√™n h·ªçc t·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ n√†o?"
        ]
    elif "ng·ªØ ph√°p" in query.lower():
        st.session_state.suggestions = [
            "Nh·ªØng l·ªói sai th∆∞·ªùng g·∫∑p trong ng·ªØ ph√°p?",
            "C√≥ c√°ch n√†o h·ªçc ng·ªØ ph√°p d·ªÖ d√†ng h∆°n kh√¥ng?",
            "V√≠ d·ª• v·ªÅ c√¢u s·ª≠ d·ª•ng th√¨ qu√° kh·ª© ho√†n th√†nh?",
            "S·ª± kh√°c bi·ªát gi·ªØa 'will' v√† 'going to'?"
        ]
    else:
        st.session_state.suggestions = [
            "H√£y cho t√¥i th√™m v√≠ d·ª• v·ªÅ c√¢u tr√™n.",
            "C√≥ quy t·∫Øc n√†o gi√∫p nh·ªõ ƒëi·ªÅu n√†y kh√¥ng?",
            "C√°ch d√πng trong th·ª±c t·∫ø nh∆∞ th·∫ø n√†o?",
            "C√≥ l·ªói ph·ªï bi·∫øn n√†o khi s·ª≠ d·ª•ng kh√¥ng?",
            "L√†m sao ƒë·ªÉ √°p d·ª•ng ki·∫øn th·ª©c n√†y v√†o giao ti·∫øp h√†ng ng√†y?"
        ]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
st.subheader("üìú L·ªãch s·ª≠ tr√≤ chuy·ªán")
for chat in st.session_state.chat_history:
    st.write(f"**üßë‚Äçüéì B·∫°n:** {chat['question']}")
    st.write(f"**üßë‚Äçüè´ Tr·ª£ l√Ω AI:** {chat['answer']}")


